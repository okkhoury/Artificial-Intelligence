import java.util.Scanner;

import org.w3c.dom.Node;


public class test {
	
	public static void main(String[] args) {
		
	}
	
	
	static int findMutationDistance(String start, String end, String[] bank) {
		
		Node n = new Node(5,null);
		
		
		for (int i = bank.length-1; i >= 0; i-- ) {
			
		}
		
		
		
		return 0;
		
	}
	
	
	
	
	int startIndex = 0;
    int endIndex = 0;        
    boolean endSeqFound = false;
    String current = end;
    
    Node n = new Node(5, null);
    
    ArrayList<String> cur = new ArrayList<String>();
    //cur.add(end);
    Map<String, Integer> currents = new HashMap<String, Integer>();
        
    int maxMutations = numMutationsBetween(start, end);
    int totalMutations = 0;
    
    for (int i = bank.length-1; i >= 0; i--) {
        if (bank[i].equals(end)) {
            endIndex = i;
            endSeqFound = true;
        } else if (endSeqFound) {
            for (int i = 0; i < cur.size(); i++) {
                if (isValidMutation(bank[i], cur.get(i), bank) {
                    if (numMutationsBetween(start, bank[i]) <= maxMutations) {
                        //maxMutations = numMutationsBetween(start, bank[ij])
                        cur.add(bank[i]);

                    }
                }
            }
            
            if (isValidMutation(bank[i], current, bank)) {
                if (numMutationsBetween(start, bank[i]) < maxMutations) {
                    maxMutations = numMutationsBetween(start, bank[i]);
                    current = bank[i];
                    totalMutations++; 
                    System.out.println(current);
                 }
            }
            
            if (bank[i].equals(start)) {
                return totalMutations;
            } else if (isValidMutation(start, current, bank)) {
                return totalMutations + 1;
            }
        } 
   }
    return -1;
}
	
	
	
	 static int numMutationsBetween(String start, String end) {
	        int numMutations = 0;
	        for (int i = 0; i < start.length(); i++) {
	            if (start.charAt(i) != end.charAt(i))
	                numMutations++;
	        }
	        return numMutations;
	    }
	
	

    static boolean isValidMutation(String start, String end, String[] bank) {
        // check that the bank contains both of these sequences
        if (!Arrays.asList(bank).contains(end))
            return false;
        
        // Check to see that the two sequences only differ by one letter
        int different = 0;
        for (int i = 0; i < start.length(); i++) {
            if (start.charAt(i) != end.charAt(i))       // only 1 char can be different between the sequences
                different++;
            
            if (different >= 2)
                return false;
        }
        return true;
    }

}
